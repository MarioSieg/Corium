cmake_minimum_required(VERSION 3.16)
set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")

# Set project name:
project(NominaxRuntime C CXX ASM)

message("Configuring Nominax runtime...")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

enable_testing()

if (MSVC AND NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    message(FATAL_ERROR, "MSVC is not supported! Please use Clang, GCC, MINGW or any other POSIX like compiler!")
endif()

option(NOMINAX_FAST_MATH "Use fast but IEEE incompatible math" ON)
option(NOMINAX_BUILD_UNIT_TESTS "Build the unit tests for all projects" OFF)
option(NOMINAX_BUILD_BENCHMARKS "Build the benchmarks for all projects" OFF)

# CPU arch detection:
set(CPU_IS_MIPS FALSE)
set(CPU_IS_AARCH64 FALSE)
set(CPU_IS_X86_64 FALSE)
set(CPU_IS_POWER_PC FALSE)

message("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")

if(CMAKE_SYSTEM_PROCESSOR MATCHES "^mips")
  set(CPU_IS_MIPS TRUE)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^aarch64")
  set(CPU_IS_AARCH64 TRUE)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86_64|AMD64|amd64)")
  set(CPU_IS_X86_64 TRUE)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)")
  set(CPU_IS_POWER_PC TRUE)
endif()

message("CPU_IS_MIPS: ${CPU_IS_MIPS}")
message("CPU_IS_AARCH64: ${CPU_IS_AARCH64}")
message("CPU_IS_X86_64: ${CPU_IS_X86_64}")
message("CPU_IS_POWER_PC: ${CPU_IS_POWER_PC}")

# runtime library:
file(GLOB_RECURSE NOMINAX_SOURCES
    Include/*.hpp
    Include/*.inl
    Source/ByteCode/*.cpp
    Source/Core/*.cpp
    Source/Foundation/*.cpp
    Source/JIT/*.cpp
)

if (${CPU_IS_X86_64})
    set_source_files_properties(Source/Core/VMHypervisor_Impl_AVX.cpp PROPERTIES COMPILE_FLAGS -mavx)
    set_source_files_properties(Source/Core/VMHypervisor_Impl_AVX512F.cpp PROPERTIES COMPILE_FLAGS -mavx512f)
    file(GLOB_RECURSE NOMINAX_ASM_SOURCES Source/Assembler/X86_64/*.cpp Source/Assembler/X86_64/*.S)
    set(NOMINAX_SOURCES ${NOMINAX_SOURCES} ${NOMINAX_ASM_SOURCES})
elseif (${CPU_IS_AARCH64})
    file(GLOB_RECURSE NOMINAX_ASM_SOURCES Source/Assembler/AArch64/*.cpp Source/Assembler/AArch64/*.S)
    set(NOMINAX_SOURCES ${NOMINAX_SOURCES} ${NOMINAX_ASM_SOURCES})
endif()

add_library(NominaxRuntime STATIC "${NOMINAX_SOURCES}")

if (WIN32)
    set(CMAKE_ASM_FLAGS "${CFLAGS} -D__WIN__")
    set(OS_WINDOWS TRUE)
    message("Running on Windows")
elseif (APPLE)
    set(CMAKE_ASM_FLAGS "${CFLAGS} -D__APPLE__")
    set(OS_MAC TRUE)
    message("Running on MacOS")
else()
    set(CMAKE_ASM_FLAGS "${CFLAGS} -D__LINUX__")
    set(OS_LINUX TRUE)
    message("Running on Linux")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    message("Release build, using all optimization flags")
endif()

if (${CPU_IS_X86_64})
    target_compile_options(NominaxRuntime PRIVATE -mmmx)
    target_compile_options(NominaxRuntime PRIVATE -msse)
    target_compile_options(NominaxRuntime PRIVATE -msse2)
    target_compile_options(NominaxRuntime PRIVATE -msse3)
    target_compile_options(NominaxRuntime PRIVATE -mssse3)
    target_compile_options(NominaxRuntime PRIVATE -msahf)
    target_compile_options(NominaxRuntime PRIVATE -mcx16)
endif()

target_compile_options(NominaxRuntime PRIVATE -Wall)
target_compile_options(NominaxRuntime PRIVATE -Werror)
target_compile_options(NominaxRuntime PRIVATE -Wextra)
target_compile_options(NominaxRuntime PRIVATE -Wno-error=unused-function)
target_compile_options(NominaxRuntime PRIVATE -Wno-error=unused-macros)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" AND "x${CMAKE_CXX_SIMULATE_ID}" STREQUAL "xMSVC")
    set(COM_CLANG_CL TRUE)
    set(COM_CLANG FALSE)
    set(COM_GCC FALSE)
    message("Using LLVM Clang-CL driver!")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(COM_CLANG_CL FALSE)
    set(COM_CLANG TRUE)
    set(COM_GCC FALSE)
    message("Using LLVM Clang!")
else()
    set(COM_CLANG_CL FALSE)
    set(COM_CLANG FALSE)
    set(COM_GCC TRUE)
    message("Using GCC!")
endif()

if (${COM_CLANG_CL})
    target_compile_options(NominaxRuntime PRIVATE -Wno-gnu-label-as-value)
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++20-compat)
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++20-compat-pedantic)
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++98-compat)
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++98-compat-pedantic)
    target_compile_options(NominaxRuntime PRIVATE -Wno-dollar-in-identifier-extension)
    target_compile_options(NominaxRuntime PRIVATE -Wno-unreachable-code)
    target_compile_options(NominaxRuntime PRIVATE -Wno-float-equal)
    target_compile_options(NominaxRuntime PRIVATE -Wno-global-constructors)
    target_compile_options(NominaxRuntime PRIVATE -Wno-exit-time-destructors)
    target_compile_options(NominaxRuntime PRIVATE -Wno-switch-enum)
    target_compile_options(NominaxRuntime PRIVATE -Wno-signed-enum-bitfield)
    target_compile_options(NominaxRuntime PRIVATE -Wno-sign-conversion)
    target_compile_options(NominaxRuntime PRIVATE -Wno-implicit-int-conversion)
    target_compile_options(NominaxRuntime PRIVATE -Wno-documentation-unknown-command)
    target_compile_options(NominaxRuntime PRIVATE -Wno-comma)
    target_compile_options(NominaxRuntime PRIVATE -Wno-undefined-func-template)
    target_compile_options(NominaxRuntime PRIVATE -Wno-unused-const-variable)
    target_compile_options(NominaxRuntime PRIVATE -Wno-covered-switch-default)
    target_compile_options(NominaxRuntime PRIVATE -Wno-register)
elseif(${COM_CLANG})
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++98-compat)
    target_compile_options(NominaxRuntime PRIVATE -Wno-c++98-compat-pedantic)
    target_compile_options(NominaxRuntime PRIVATE -Wno-unknown-attributes)
    target_compile_options(NominaxRuntime PRIVATE -Wno-gnu-label-as-value)
    target_compile_options(NominaxRuntime PRIVATE -Wno-dollar-in-identifier-extension)
    target_compile_options(NominaxRuntime PRIVATE -Wno-unused-const-variable)
    target_compile_options(NominaxRuntime PRIVATE -static)
else()
    target_compile_options(NominaxRuntime PRIVATE -static)
    target_compile_options(NominaxRuntime PRIVATE -Wno-attributes)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(NominaxRuntime PRIVATE -Ofast)

    if (${COM_CLANG_CL})
        target_compile_options(NominaxRuntime PRIVATE /EHsc)
        target_compile_options(NominaxRuntime PRIVATE /D_HAS_EXCEPTIONS=0)
        if(${NOMINAX_FAST_MATH})
            target_compile_options(NominaxRuntime PRIVATE /fp:fast)
        endif()
    else()
        target_compile_options(NominaxRuntime PRIVATE -fno-exceptions)
        target_compile_options(NominaxRuntime PRIVATE -fomit-frame-pointer)
        target_compile_options(NominaxRuntime PRIVATE -flto)
        if(${NOMINAX_FAST_MATH})
            target_compile_options(NominaxRuntime PRIVATE -ffast-math)
        endif()
    endif()

endif()

if (${NOMINAX_BUILD_UNIT_TESTS})
    add_subdirectory(Tools/googletest)
    set(TEST_INCLUDE Tools/googletest/googletest/include/gtest/)
    add_library(NominaxRuntimeTest STATIC "${NOMINAX_SOURCES}")
    target_compile_definitions(NominaxRuntimeTest PRIVATE __NOX_TEST__)
    target_compile_options(NominaxRuntimeTest PRIVATE -march=native)
    target_compile_options(NominaxRuntimeTest PRIVATE -Wno-attributes)
    target_compile_options(NominaxRuntimeTest PRIVATE -Wno-register)
    file(GLOB_RECURSE NOMINAX_TEST_SOURCES Tests/*.cpp)
    add_executable(NominaxUnitTest ${NOMINAX_TEST_SOURCES})
    target_compile_options(NominaxUnitTest PRIVATE -march=native)
    target_compile_options(NominaxUnitTest PRIVATE -Wno-attributes)
    target_compile_options(NominaxUnitTest PRIVATE -Wno-register)
    add_test(NAME NominaxUnitTests COMMAND NominaxUnitTest)
    target_include_directories(NominaxUnitTest PUBLIC ${TEST_INCLUDE})
    target_link_libraries(NominaxUnitTest gtest)
    target_link_libraries(NominaxUnitTest NominaxRuntimeTest)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(NominaxUnitTest pthread)
    endif()
    configure_file(Tests/MockInput.txt ${CMAKE_CURRENT_BINARY_DIR}/MockInput.txt COPYONLY)
endif()

if (${NOMINAX_BUILD_BENCHMARKS})
    add_subdirectory(Tools/benchmark)
    file(GLOB_RECURSE NOMINAX_BENCHMARK_SOURCES Benchmarks/*.cpp)
    add_executable(NominaxBenchmark ${NOMINAX_BENCHMARK_SOURCES})
    set_property(TARGET NominaxBenchmark PROPERTY CXX_STANDARD 20)
    target_include_directories(NominaxBenchmark PUBLIC Tools/benchmark/include/benchmark/)
    target_link_libraries(NominaxBenchmark benchmark::benchmark)
    target_link_libraries(NominaxBenchmark NominaxRuntime)
    target_compile_options(NominaxBenchmark PRIVATE -Ofast)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(NominaxBenchmark pthread)
    endif()
endif()

add_subdirectory(Tools/fmt/)
target_link_libraries("NominaxRuntime" fmt)
if (${NOMINAX_BUILD_UNIT_TESTS})
    target_link_libraries(NominaxRuntimeTest fmt)
endif()

if (NOT WIN32)
    target_link_libraries(NominaxRuntime dl)
    target_link_libraries(NominaxRuntime pthread)
    if (NOT APPLE)
        target_link_libraries(NominaxRuntime tbb)
    endif()

    if (${NOMINAX_BUILD_UNIT_TESTS})
        target_link_libraries(NominaxRuntimeTest dl)
        target_link_libraries(NominaxRuntimeTest pthread)
        if (NOT APPLE)
            target_link_libraries(NominaxRuntimeTest tbb)
        endif()
    endif()
endif()

add_executable(Nominax Entry.cpp)
target_link_libraries(Nominax NominaxRuntime)

if (${COM_CLANG})
    target_compile_options(Nominax PRIVATE -static)
elseif(${COM_GCC})
    target_compile_options(Nominax PRIVATE -static)
endif()
