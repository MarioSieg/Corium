CompilationUnit = {
    SOI ~ Module? ~ (GlobalStatement | StatementSeparator)* ~ EOI
}

GlobalStatement = {
    Function |
    NativeFunction |
    MutableVariable |
    ImmutableVariable
}

Function = {
     FunctionSignature ~ " {" ~ NEWLINE ~ Block ~ "}" ~ NEWLINE
}

NativeFunction = {
    "native " ~ FunctionSignature ~ NEWLINE
}

FunctionSignature = {
    "function " ~ Identifier ~ " (" ~ ParameterList? ~ ")" ~ (" " ~ Identifier)?
}

Block = {
     (LocalStatement | StatementSeparator)*
}

LocalStatement = {
    MutableVariable |
    ImmutableVariable |
    ReturnStatement
}

Module = {
    "module " ~ Identifier ~ NEWLINE
}

MutableVariable = {
    "let " ~ Identifier ~ (" " ~ Identifier)? ~ " = " ~ Expression ~ NEWLINE
}

ImmutableVariable = {
    "const " ~ Identifier ~ (" " ~ Identifier)? ~ " = " ~ Expression ~ NEWLINE
}

ReturnStatement = {
    "return" ~ (" " ~ Expression)? ~ NEWLINE
}

ParameterList = {
    (Parameter ~ (", " ~ Parameter)*)
}

Parameter = {
    Identifier ~ " " ~ Identifier ~ (" = " ~ Expression)?
}

Expression = {
    RootExpression ~ (Whitespace? ~ BinaryOperator ~ Whitespace? ~ RootExpression)*
}

RootExpression = {
    LiteralExpression |
    IdentifierExpression |
    ParenthesisExpression |
    UnaryExpression
}

LiteralExpression = {
    Literal
}

IdentifierExpression = {
    Identifier
}

ParenthesisExpression = {
    "(" ~ Expression ~ ")"
}

UnaryExpression = {
    UnaryOperator ~ RootExpression
}

BinaryOperator = _{
    Addition |
    Subtraction |
    Multiplication |
    Division |
    Modulo |

    BitwiseAnd |
    BitwiseOr |
    BitwiseXor |
    BitwiseRotationLeft |
    BitwiseRotationRight |
    BitwiseShiftLeft |
    BitwiseShiftRight |
    LogicalAnd |
    LogicalOr
}

UnaryOperator = _{
    Addition |
    Subtraction |
    BitwiseComplement |
    LogicalNot
}

Addition = @{ "+" }
Subtraction = @{ "-" }
Multiplication = @{ "*" }
Division = @{ "/" }
Modulo = @{ "%" }
BitwiseAnd = @{ "&" }
BitwiseOr = @{ "|" }
BitwiseXor = @{ "^" }
BitwiseShiftLeft = @{ "<<" }
BitwiseShiftRight = @{ ">>" }
BitwiseRotationLeft  = @{ "<<<" }
BitwiseRotationRight = @{ ">>>" }
LogicalAnd = @ { "and" }
LogicalOr = @ { "or" }

BitwiseComplement = @{ "~" }
LogicalNot = @ { "not" }

Literal = {
    FloatLiteral |
    IntLiteral |
    BoolLiteral |
    CharLiteral |
    StringLiteral
}

FloatLiteral = @{
    (("_"? ~ ASCII_DIGIT)+ ~ "." ~ ("_"? ~ ASCII_DIGIT)+)
}

IntLiteral = @{
    (("_"? ~ ASCII_DIGIT)+)
}

BoolLiteral = @{
    "true" | "false"
}

CharLiteral = @{
    "'" ~ Char ~ "'"
}

StringLiteral = @{
    "\"" ~ Char* ~ "\""
}

Identifier = {
    IdentifierText ~ ("." ~ IdentifierText)*
}

IdentifierText = @{
 ASCII_ALPHA ~ ASCII_ALPHANUMERIC*
}

Char = @{
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{8})
}

StatementSeparator = _{
    NEWLINE |
    SEPARATOR
}

Whitespace = _{
   " " | "\t"
}

CommentBlock = @{ "##" ~ (!"##" ~ ANY)* ~ "##" }
CommentLine = @{ "#" ~ (!("\r" | "\n") ~ ANY)* }

COMMENT = _{
    CommentBlock | CommentLine
}
