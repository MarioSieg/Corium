name: CMake

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Install Dependencies
      run: sudo apt install gcc-11 -y && sudo apt install g++-11 -y && sudo apt-get install libtbb-dev -y && export CXX=/usr/bin/g++-11 && export CC=/usr/bin/gcc-11
      
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: sudo cp $GITHUB_WORKSPACE/Nominax/Tools/utils.h /usr/include/c++/11/pstl/utils.h && cd $GITHUB_WORKSPACE/Nominax/ && cmake -D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11 -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNOMINAX_BUILD_UNIT_TESTS=ON -DNOMINAX_BUILD_BENCHMARKS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target Nominax NominaxBenchmark NominaxUnitTest
      
    - name: Boot
      run: ${{github.workspace}}/build/Nominax

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ./NominaxUnitTest
